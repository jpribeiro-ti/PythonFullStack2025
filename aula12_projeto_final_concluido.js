import entradaDados from 'readline-sync';

// Classe Aluno
class Aluno { // A classe Aluno √© criada para representar cada aluno dentro do sistema
    constructor() { // m√©todo construtor, para iniciar a fun√ß√£o
        this.nomeAluno = entradaDados.question("\nDigite o nome do(a) Aluno(a): "); // Solicita que o usu√°rio digite o nome do ALuno
        this.matriculaAluno = this.gerarMatricula(); // Chama o m√©todo para gerar matr√≠cula automaticamente
        this.notaAluno = []; // Esta linha inicializa a propriedade notaAluno como um array vazio. Esse array ser√° usado para armazenar refer√™ncias a notas do alunos
        this.disciplinasMatriculadas = []; // Inicializa a propriedade disciplinasMatriculadas como um array vazio. Este array armazenar√° as disciplinas em que o aluno est√° matriculado
    }

    adicionarNota(nota) { // Este √© um m√©todo que permite adicionar uma nota ao array notaAluno
        this.notaAluno.push(nota); // A nota fornecida como argumento √© adicionada ao array notaAluno usando o m√©todo push, permitindo que as notas do aluno sejam acumuladas √† medida que ele √© avaliado nas disciplinas
    }

    calcularMedia() { // Nota Aluno √© um Array
        if (this.notaAluno.length === 0) return 0; // Se o total de nota for igual a zero
        const soma = this.notaAluno.reduce((total, nota) => total + nota, 0); // Este √© um m√©todo de array que executa uma fun√ß√£o fornecida em cada elemento do array (da esquerda para a direita) para reduzir o array a um √∫nico valor (somando os n√∫meros)
        // (total, nota): total √© o acumulador que armazena o valor total at√© aquele ponto, e nota √© o elemento atual do array que est√° sendo processado.
        // total + nota: Esta express√£o soma o valor acumulado (total) com a nota atual (nota)
        return soma / this.notaAluno.length; // A soma total das notas √© dividida pelo n√∫mero de notas. O resultado dessa divis√£o √© a m√©dia das notas
    }

    matricularNaDisciplina(disciplina) { // M√©todo matricularNaDisciplina e a (disciplina √© o par√¢metro)
        if (!disciplina) { // Se o par√¢metro for falso, o c√≥digo do erro ser√° executado
            console.log("Erro: Disciplina inv√°lida.");
            return; // Essa linha encerra a execu√ß√£o da fun√ß√£o, impedindo que o c√≥digo abaixo dela seja executado
        }
        this.disciplinasMatriculadas.push(disciplina); // Se a disciplina √© v√°lida, esta linha adiciona a disciplina ao array disciplinasMatriculadas do aluno (representado por this). Isso significa que o aluno agora est√° matriculado nessa disciplina
        disciplina.matricularAluno(this); // Esta linha chama o m√©todo matricularAluno do objeto disciplina, passando o pr√≥prio aluno como argumento (this). Essa a√ß√£o normalmente indica que a disciplina tamb√©m est√° atualizando seu registro para incluir o novo aluno matriculado
    }

    gerarMatricula() {
        const anoAtual = new Date().getFullYear(); // Obt√©m o ano atual
        const digitosAleatorios = Math.floor(100 + Math.random() * 900); // Gera um n√∫mero aleat√≥rio entre 100 e 999
        return `${anoAtual}${digitosAleatorios}`; // Retorna a matr√≠cula no formato "AAAAAAA"
    }

    gerarBoleto() { // M√©todo gerarBoleto
        const valorMensalidade = 500.00; // Constante com o valor fixo da mensalidade
        const dataVencimento = "10/04/2024"; // Constante com Data fixada
        console.log(`\nüí∞ BOLETO GERADO PARA ${this.nomeAluno}`); // Mensagem na sa√≠da do console indicando que um boleto foi gerado para um aluno espec√≠fico. A propriedade nomeAluno busca o Dado Armazenado com o nome estudante na Fun√ß√£o Aluno
        console.log(`Valor: R$${valorMensalidade.toFixed(2)}`); // Valor da mensalidade √© impresso no console, formatado para dois d√≠gitos decimais, usando o m√©todo toFixed(2)
        console.log(`Vencimento: ${dataVencimento}`); //Esta linha imprime a data de vencimento do boleto na Constante DataVencimento.
        console.log("C√≥digo de barras: 1234.5678.9101.1121\n"); // Simulando o c√≥digo de Barras
    }
}

// Classe Professor
class Professor { // Classe Professor
    constructor() { // Iniciar a fun√ß√£o
        this.nomeProfessor = entradaDados.question("\nDigite o nome do professor: "); // Vari√°vel recebendo o nome do Professor (Similar ao Input)
        this.departamentoProfessor = entradaDados.question("Digite o departamento do professor: ");  // Vari√°vel recebendo o departamento do Professor (Similar ao Input)
        this.disciplinasMinistradas = []; // Array com as turmas que o professor leciona
    }

    atribuirDisciplina(disciplina) { // M√©todo atribuirDisciplina com o par√¢metro disciplina
        if (!disciplina) { // Se o par√¢metro for falso, o c√≥digo do erro ser√° executado
            console.log("Erro: Nenhuma disciplina informada."); // Mensagem de Erro
            return; // Essa linha encerra a execu√ß√£o do m√©todo, impedindo que o c√≥digo abaixo dela seja executado
        }
        this.disciplinasMinistradas.push(disciplina); // Se a confirma√ß√£o √© v√°lida, esta linha adiciona ao Array disciplinaMinistradas ao Professor no array disciplinasMinistradas do professor (representado por this). Isso significa que o professor agora est√° matriculado para lecionar essa mat√©ria
        console.log(`Professor ${this.nomeProfessor} agora leciona ${disciplina.nomeDisciplina}`); // Mensagem na tela de confirma√ß√£o que o Professor agora Leciona essa materia
    }
}

// Classe Disciplina
class Disciplina {  // Classe Disciplina
    constructor(nomeDisciplina, codigoDisciplina) { // Iniciando a fun√ß√£o, com os par√¢metros nomeDisciplina, codigoDisciplina
        this.nomeDisciplina = nomeDisciplina; // A propriedade nomeDisciplina do objeto atual √© definida com o valor do par√¢metro nomeDisciplina. Essa propriedade armazena o nome da disciplina, permitindo identificar qual disciplina a inst√¢ncia representa
        this.codigoDisciplina = codigoDisciplina; // A propriedade codigoDisciplina do objeto atual √© definida com o valor do par√¢metro codigoDisciplina. Essa propriedade armazena o codigo da disciplina, permitindo identificar qual disciplina a inst√¢ncia representa
        this.alunosMatriculados = []; // Esta linha inicializa a propriedade alunosMatriculados como um array vazio. Esse array ser√° usado para armazenar refer√™ncias a alunos que est√£o matriculados nessa disciplina
    }

    matricularAluno(aluno) { // O m√©todo √© chamado com um argumento, aluno, que deve ser um objeto representando um aluno que se deseja matricular na disciplina
        if (!aluno) { // Se for falso a pr√≥xima linha com o Erro ser√° executado
            console.log("Erro: Aluno inv√°lido.");
            return; // Return encerra a execu√ß√£o do m√©todo
        }
        this.alunosMatriculados.push(aluno); // Se a confirma√ß√£o √© v√°lida, esta linha adiciona ao Array alunosMatriculados, que cont√©m todos os alunos que est√£o atualmente matriculados nessa disciplina
        console.log(`Aluno ${aluno.nomeAluno} matriculado na disciplina ${this.nomeDisciplina}.`); // Mensagem confirmando que o aluno foi matriculado
    }

    gerarBoletim() { // O m√©todo gerarBoletim pertence √† classe Disciplina e tem a fun√ß√£o de gerar um boletim que lista os alunos matriculados na disciplina, juntamente com suas m√©dias
        if (this.alunosMatriculados.length === 0) { // Esta linha verifica se a propriedade alunosMatriculados, que √© um array contendo os alunos matriculados na disciplina. Se o comprimento do array for 0, significa que n√£o h√° alunos matriculados
            console.log(`Nenhum aluno matriculado na disciplina ${this.nomeDisciplina}.`);
            return; // Return encerra a execu√ß√£o do m√©todo
        }

        console.log(`üìú Boletim da disciplina: ${this.nomeDisciplina}`); // Se houver alunos matriculados, a Mensagem √© impressa
        this.alunosMatriculados.forEach((aluno, index) => { // A fun√ß√£o forEach √© usada para iterar sobre cada aluno no array alunosMatriculados. Para cada itera√ß√£o, o aluno atual e seu index (posi√ß√£o no array) s√£o passados para a fun√ß√£o de callback
            console.log(`${index + 1}. ${aluno.nomeAluno} - M√©dia: ${aluno.calcularMedia().toFixed(2)}`); // Dentro do loop, uma linha √© impressa no console para cada aluno, mostrando sua posi√ß√£o na lista (com index + 1 para que a contagem comece em 1), o nome do aluno e sua m√©dia. A m√©dia √© calculada pelo m√©todo calcularMedia() do objeto aluno e formatada com duas casas decimais usando toFixed(2)
        });
    }
}

// Classe Escola
class Escola { // Essa Classe ajuda a organizar e gerenciar Aluno, Professor e Disciplina dentro do App
    constructor(nome) { // O construtor √© um m√©todo especial que √© chamado quando uma nova inst√¢ncia da classe Escola
        this.nome = nome; // Armazena o nome da escola
        this.listaAlunos = []; // Inicia um Array Vazio que ser√° usado para armazenar objetos de alunos matriculados na escola
        this.listaProfessores = []; // Inicia um Array vazio que ser√° usado para armazenar objetos de Professores contratados
        this.listaDisciplinas = []; // Inicia um Array vazio que ser√° usado para armazenas disciplinas oferecidas pela escola
    }

    matricularAluno() { // M√©todo respons√°vel por matricular o Aluno
        let novoAluno = new Aluno(); // Uma nova inst√¢ncia da classe Aluno √© criada, a classe Aluno tem um construtor que coleta informa√ß√µes do aluno
        this.listaAlunos.push(novoAluno); // A nova inst√¢ncia do aluno (novoAluno) √© adicionada ao array listaAlunos
        console.log(`\nAluno ${novoAluno.nomeAluno} matriculado com sucesso!\n`); // Ap√≥s a matr√≠cula, uma mensagem √© impressa no console confirmando que o aluno foi matriculado com sucesso
    }

    contratarProfessor() { // M√©todo respons√°vel por contratar o Professor
        let novoProfessor = new Professor(); // Uma nova inst√¢ncia da classe Professor √© criada, a classe Professor tem um construtor que coleta informa√ß√µes do aluno
        this.listaProfessores.push(novoProfessor); // A nova inst√¢ncia do professor (novoProfessor) √© adicionada ao array listaProfessores
        console.log(`\nProfessor(a) ${novoProfessor.nomeProfessor} contratado(a) com sucesso!\n`); // Ap√≥s a matr√≠cula, uma mensagem √© impressa no console confirmando que o professor foi contratado com sucesso
    }

    criarDisciplina() { // M√©todo respons√°vel por criar a disciplina e adicion√°-la a lista de disciplina da escola
        let nomeDisciplina = entradaDados.question("\nDigite o nome da disciplina: "); // A fun√ß√£o entradaDados.question √© responsavel pela entrada de Dados (similar ao Input)
        //let codigoDisciplina = entradaDados.question("Digite o c√≥digo da disciplina: "); // A fun√ß√£o entradaDados.question √© responsavel pela entrada de Dados (similar ao Input)
        let codigoDisciplina= this.gerarCodigoDisciplina(); // Gerar c√≥digo automatico da disciplina
        let novaDisciplina = new Disciplina(nomeDisciplina, codigoDisciplina); // Nova inst√¢ncia da classe Disciplina √© criada, utilizando os nomes e c√≥digos fornecidos. A nova inst√¢ncia √© armazenada na vari√°vel novaDisciplina
        this.listaDisciplinas.push(novaDisciplina); // Adiciona a nova disciplina ao array listaDisciplinas, que faz parte da classe Escola e armazena todas as disciplinas criadas na escola
        console.log(`\nDisciplina ${nomeDisciplina} codigo disciplina ${codigoDisciplina} criada com sucesso!\n`); // Uma confirma√ß√£o de disciplina criada com sucesso
    }

    gerarCodigoDisciplina() {
        const anoAtual = new Date().getFullYear(); // Obt√©m o ano atual
        const digitosAleatorios1 = Math.floor(100 + Math.random() * 900); // Gera um n√∫mero aleat√≥rio entre 100 e 999
        return `Dg${digitosAleatorios1}`; // Retorna a matr√≠cula no formato "DgXXX"
    }


    gerarRelatorio() { // O m√©todo gerarRelatorio √© respons√°vel por imprimir um relat√≥rio completo da escola, que inclui informa√ß√µes sobre alunos matriculados, professores contratados e disciplinas cadastradas
        console.log("\n=== RELAT√ìRIO DA ESCOLA ==="); // Cabe√ßalho indicando o inicio do relat√≥rio
        console.log(`Escola: ${this.nome}\n`); // Exibe o nome da escola acessando a propriedade nome da inst√¢ncia escola

        console.log("üìå Alunos Matriculados:"); // Exibe o texto Alunos Matriculados
        if (this.listaAlunos.length === 0) { // Condi√ß√£o que verifica se n√£o h√° alunos matriculados. Se a lista estiver vazia, imprime uma mensagem informando isso
            console.log("Nenhum aluno matriculado."); // Se a condi√ß√£o for verdadeira imprime na tela
        } else { // caso contr√°rio
            this.listaAlunos.forEach((aluno, index) => { // Se houver alunos, um loop forEach √© usado para percorrer cada aluno - A fun√ß√£o forEach √© usada para iterar sobre cada aluno no array listaALunos. Para cada itera√ß√£o, o aluno atual e seu index (posi√ß√£o no array) s√£o passados para a fun√ß√£o de callback
                console.log(`${index + 1}. ${aluno.nomeAluno} - Turmas: ${aluno.disciplinasMatriculadas.map(d => d.nomeDisciplina).join(", ") || "Nenhuma"}`); // Exibe a posi√ß√£o do aluno na lista, o nome do aluno e as turmas (disciplinas) nas quais ele est√° matriculado. A fun√ß√£o map √© usada para extrair os nomes das disciplinas, e join as conecta em uma √∫nica string. Se o aluno n√£o estiver matriculado em nenhuma turma, imprime "Nenhuma"
            });
        }

        console.log("\nüë®‚Äçüè´ Professores Contratados:"); //  Imprime o t√≠tulo para a se√ß√£o de professores
        if (this.listaProfessores.length === 0) { // Condi√ß√£o que verifica se n√£o h√° professores matriculados. Se a lista estiver vazia, imprime uma mensagem informando isso
            console.log("Nenhum professor contratado.");
        } else { // caso contr√°rio
            this.listaProfessores.forEach((professor, index) => { // Se houver alunos, um loop forEach √© usado para percorrer cada aluno - A fun√ß√£o forEach √© usada paa iterar sobre cada aluno no array listaProfessores. Para cada itera√ß√£o, o professor atual e seu index (posi√ß√£o no array) s√ßao passados para a fun√ß√£o de callback
                console.log(`${index + 1}. ${professor.nomeProfessor} - Departamento: ${professor.departamentoProfessor} - Turmas: ${professor.disciplinasMinistradas.map(d => d.nomeDisciplina).join(", ") || "Nenhuma"}`);  // Se existir, um forEach √© utilizado para listar cada professor, incluindo o nome, o departamento e as disciplinas que lecionam. A fun√ß√£o map √© usada para extrair os nomes das disciplinas, e join as conecta em uma √∫nica string. Se o professor n√£o estiver matriculado em nenhuma turma, imprime "Nenhuma"
            });
        }

        console.log("\nüìñ Disciplinas Cadastradas:"); // Imprime o texto
        if (this.listaDisciplinas.length === 0) { // Verifica se a lista esta vazia, se for true, imprime nenhuma disciplina cadastrada
            console.log("Nenhuma disciplina cadastrada.");
        } else { // caso contrario
            this.listaDisciplinas.forEach((disciplina, index) => { // Se a lista existir, um forEach √© utilizado para listar cada professor, incluindo o nome, o departamento e as disciplinas que lecionam
                console.log(`${index + 1}. ${disciplina.nomeDisciplina} (C√≥digo: ${disciplina.codigoDisciplina}) - Alunos: ${disciplina.alunosMatriculados.length}`);
            });
        }
    }
}

// Criando uma inst√¢ncia da escola
let minhaEscola = new Escola("  - ### Escola Aprendendo com o professor Douglas ### -  "); // Cria uma nova inst√¢ncia da classe Escola, nomeando-a de "Escola Aprendendo com o professor Douglas". Essa inst√¢ncia ir√° armazenar informa√ß√µes sobre alunos, professores e disciplinas

// Menu interativo
let continua = true; // Esta linha inicializa uma vari√°vel booleana continua e a define como true. Essa vari√°vel ser√° usada para controlar o loop, permitindo que ele continue a executar at√© que uma condi√ß√£o espec√≠fica altere seu valor para false
while (continua) { // Este √© um loop que continua a executar enquanto a condi√ß√£o continua for verdadeira. Isso permite que o menu seja apresentado repetidamente ao usu√°rio at√© que ele escolha sair
    console.log("\n=== MENU DA ESCOLA ==="); // Dentro do loop, v√°rias op√ß√µes s√£o impressas no console, apresentadas como um menu. Cada op√ß√£o corresponde a uma fun√ß√£o do programa
    console.log("1. Matricular Aluno");
    console.log("2. Contratar Professor");
    console.log("3. Criar Disciplina");
    console.log("4. Gerar Relat√≥rio");
    console.log("5. Matricular Aluno em Disciplina");
    console.log("6. Professor Lecionar Disciplina");
    console.log("7. Gerar Boleto do Aluno");
    console.log("8. Sair");

    let escolha = Number(entradaDados.question("\nEscolha uma opcao: ")); // entrada do usu√°rio para escolher uma op√ß√£o do menu. O m√©todo entradaDados.question() captura a resposta do usu√°rio (presumivelmente da linha de comandos). O valor retornado √© convertido para um n√∫mero usando Number(...) para que possa ser usado no switch
    
    switch (escolha) { // Um switch √© utilizado para executar um bloco de c√≥digo espec√≠fico com base na escolha do usu√°rio
        case 1: // Se o usu√°rio escolher 1, o m√©todo matricularAluno() da inst√¢ncia da escola (minhaEscola) √© chamado, permitindo ao usu√°rio matricular um novo aluno
            minhaEscola.matricularAluno(); // Minha escola √© uma instancia da classe Escola, matricularAluno √© o m√©todo que matricula o Aluno
            break;
        case 2: // Chama o m√©todo contratarProfessor() da inst√¢ncia minhaEscola
            minhaEscola.contratarProfessor(); // Permite que um novo professor seja adicionado √† escola
            break;
        case 3: // Chama o m√©todo criarDisciplina()
            minhaEscola.criarDisciplina(); // Cria uma nova disciplina e a adiciona √† lista de disciplinas da escola
            break;
        case 4: // Chama o m√©todo gerarRelatorio()
            minhaEscola.gerarRelatorio(); // Gera e exibe um relat√≥rio contendo informa√ß√µes sobre alunos, professores e disciplinas
            break;
        case 5: { // Matricular Aluno em Disciplina
            // Exibe a lista de alunos cadastrados
            console.log("\nüìö Alunos Cadastrados:");
            if (minhaEscola.listaAlunos.length === 0) {
                console.log("Nenhum aluno cadastrado.");
                break;
            } else {
                minhaEscola.listaAlunos.forEach((aluno, index) => {
                    console.log(`${index + 1}. ${aluno.nomeAluno}`);
                });
            }
        
            // Solicita que o usu√°rio escolha o aluno
            let alunoEscolhido = Number(entradaDados.question("Escolha o n√∫mero do aluno para matr√≠cula na disciplina: "));
            if (alunoEscolhido < 1 || alunoEscolhido > minhaEscola.listaAlunos.length) {
                console.log("Opcao de aluno invalida!");
                break;
            }
            
            let aluno = minhaEscola.listaAlunos[alunoEscolhido - 1]; // Seleciona o aluno escolhido
        
            // Exibe a lista de disciplinas dispon√≠veis
            console.log("\nüìñ Disciplinas Cadastradas:");
            if (minhaEscola.listaDisciplinas.length === 0) {
                console.log("Nenhuma disciplina cadastrada.");
                break;
            } else {
                minhaEscola.listaDisciplinas.forEach((disciplina, index) => {
                    console.log(`${index + 1}. ${disciplina.nomeDisciplina}`);
                });
            }
            
            // Solicita que o usu√°rio escolha a disciplina
            let disciplinaEscolhida = Number(entradaDados.question("Escolha o n√∫mero da disciplina em que o aluno ser√° matriculado: "));
            if (disciplinaEscolhida < 1 || disciplinaEscolhida > minhaEscola.listaDisciplinas.length) {
                console.log("Op√ß√£o de disciplina inv√°lida!");
                break;
            }
        
            let disciplina = minhaEscola.listaDisciplinas[disciplinaEscolhida - 1]; // Seleciona a disciplina escolhida
        
            // Matricula o aluno na disciplina escolhida
            aluno.matricularNaDisciplina(disciplina); // Chama o m√©todo para matricular o aluno na disciplina
            break;
        }

        case 6: { // Professor Lecionar Disciplina
            // Exibe a lista de professores dispon√≠veis
            console.log("\nüë®‚Äçüè´ Professores Cadastrados:");
            if (minhaEscola.listaProfessores.length === 0) {
                console.log("Nenhum professor cadastrado.");
                break;
            } else {
                minhaEscola.listaProfessores.forEach((professor, index) => {
                    console.log(`${index + 1}. ${professor.nomeProfessor}`);
                });
            }
        
            // Solicita que o usu√°rio escolha o professor
            let professorEscolhido = Number(entradaDados.question("Escolha o n√∫mero do professor: "));
            if (professorEscolhido < 1 || professorEscolhido > minhaEscola.listaProfessores.length) {
                console.log("Op√ß√£o de professor inv√°lida!");
                break;
            }
            
            let professor = minhaEscola.listaProfessores[professorEscolhido - 1]; // Seleciona o professor escolhido
        
            // Exibe a lista de disciplinas dispon√≠veis
            console.log("\nüìñ Disciplinas Cadastradas:");
            if (minhaEscola.listaDisciplinas.length === 0) {
                console.log("Nenhuma disciplina cadastrada.");
                break;
            } else {
                minhaEscola.listaDisciplinas.forEach((disciplina, index) => {
                    console.log(`${index + 1}. ${disciplina.nomeDisciplina}`);
                });
            }
            
            // Solicita que o usu√°rio escolha a disciplina
            let disciplinaEscolhida = Number(entradaDados.question("Escolha o n√∫mero da disciplina que o professor lecionar√°: "));
            if (disciplinaEscolhida < 1 || disciplinaEscolhida > minhaEscola.listaDisciplinas.length) {
                console.log("Op√ß√£o de disciplina inv√°lida!");
                break;
            }
        
            let disciplina = minhaEscola.listaDisciplinas[disciplinaEscolhida - 1]; // Seleciona a disciplina escolhida
        
            // Atribui a disciplina ao professor
            professor.atribuirDisciplina(disciplina);
            
            console.log(`Professor ${professor.nomeProfessor} agora leciona ${disciplina.nomeDisciplina}.`);
            break;
        }
/*
        case 6: { // Professor Lecionar Disciplina
            let nomeProfessor = entradaDados.question("\nNome do professor: "); // O usu√°rio √© solicitado a inserir o nome do professor
            let professor = minhaEscola.listaProfessores.find(p => p.nomeProfessor === nomeProfessor); // Busca o nome do professor na listaProfessores
            
            if (!professor) { // Se a lista for vazia, imprime Professor n√£o encontrado
                console.log("Professor n√£o encontrado!");
                break;
            }
            
            let nomeAluno = entradaDados.question("Nome do aluno para gerar boleto: "); // O usu√°rio √© solicitado a inserir o nome do Aluno para gerar o boleto
            let aluno = minhaEscola.listaAlunos.find(a => a.nomeAluno === nomeAluno); // Busca o nome do aluno na listaAlunos
            
            if (!aluno) { // Se a lista n√£o existir, imprime o Aluno n√£o encontrado
                console.log("Aluno n√£o encontrado!");
                break;
            }
            
            console.log(`üìú Boleto gerado para ${aluno.nomeAluno} no valor de R$ 500,00.`); // Busca o nome do aluno na Classe aluno e imprime o valor da mensalidade, que foi gerada como uma Constante
            break;
        }
            */
        case 7: { // Gerar Boleto do Aluno
            // Exibe a lista de alunos cadastrados
            console.log("\nüìö Alunos Cadastrados:");
            if (minhaEscola.listaAlunos.length === 0) {
                console.log("Nenhum aluno cadastrado.");
                break;
            } else {
                minhaEscola.listaAlunos.forEach((aluno, index) => {
                    console.log(`${index + 1}. ${aluno.nomeAluno}`);
                });
            }
        
            // Solicita que o usu√°rio escolha o aluno
            let alunoEscolhido = Number(entradaDados.question("Escolha o n√∫mero do aluno para gerar boleto: "));
            if (alunoEscolhido < 1 || alunoEscolhido > minhaEscola.listaAlunos.length) {
                console.log("Op√ß√£o de aluno inv√°lida!");
                break;
            }
            
            let aluno = minhaEscola.listaAlunos[alunoEscolhido - 1]; // Seleciona o aluno escolhido
        
            // Gera o boleto para o aluno escolhido
            aluno.gerarBoleto();
            break;
        }
        case 8: // Sair do App
            continua = false;
            console.log("Saindo...");
            break;
        default:
            console.log("Op√ß√£o inv√°lida! Tente novamente.");
    }
}